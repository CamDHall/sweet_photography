{"version":3,"sources":["components/Portfolio.tsx","components/BookingContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["breakpointColumnsObj","default","1100","700","500","images","Portfolio","iUrl","urls","forEach","element","push","src","useState","fullScreenImageSrc","setFullScreenImage","items","map","image","key","Fragment","className","breakpointCols","columnClassName","alt","onClick","firebase","require","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","functions","BookingContainer","isSubmittingForm","setIsSubmittingForm","submitted","setSubmitted","event","a","preventDefault","formData","FormData","target","formValues","fname","get","toString","lname","email","phone","Number","numberOfDogs","comments","dataHtml","document","getElementById","id","httpsCallable","sendEmail","then","result","onSubmit","required","type","name","aria-required","aria-label","minLength","pattern","disabled","urlsGroup1","splice","Math","ceil","length","urlsGroup2","App","bookingRef","useRef","ref","window","scrollTo","top","current","offsetTop","behavior","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a099665a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/portfolio.scss';\r\nimport Masonry from 'react-masonry-css'\r\n\r\nconst breakpointColumnsObj = {\r\n    default: 3,\r\n    1100: 3,\r\n    700: 1,\r\n    500: 1\r\n  };\r\n\r\nconst Portfolio = (iUrl: IUrlArray) => {\r\n    generateImages(iUrl.urls);\r\n\r\n    const [ fullScreenImageSrc, setFullScreenImage ] = useState(\"\");\r\n\r\n    const MasonryElement = (data: any) => (\r\n            <img src={process.env.PUBLIC_URL +\"/images/gallery/\" + data.data.src} alt={data.data.src} role=\"image\" />\r\n    );\r\n\r\n    const items = images.map(function(image) {\r\n        return <img src={process.env.PUBLIC_URL +\"/images/gallery/\" + image.src} key={image.src} />\r\n      });\r\n\r\n    const enlargeImage = (event: any) => {\r\n        setFullScreenImage(event.target.src);\r\n    }\r\n\r\n    const closeImage = () => {\r\n        setFullScreenImage(\"\");\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n        <div className=\"wrapper portfolio\">\r\n            <div className=\"gallery\">\r\n                <Masonry\r\n                    breakpointCols={breakpointColumnsObj}\r\n                    className=\"grid\"\r\n                    columnClassName=\"grid-column\">\r\n                        { items }\r\n                </Masonry>\r\n            </div>\r\n        </div>\r\n        {fullScreenImageSrc !== \"\" ? \r\n            (\r\n            <div className=\"fullscreen-image\">\r\n                <img src={fullScreenImageSrc} alt={fullScreenImageSrc} />\r\n                <button className=\"close\" onClick={closeImage}>&#10005;</button>\r\n            </div>\r\n            ) : null\r\n        }\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nlet images: any[] = [];\r\n\r\nfunction generateImages(urls: string[]) {\r\n    images = [];\r\n    urls.forEach(element => {\r\n        images.push({ src: element});\r\n    });\r\n}\r\n\r\nexport default Portfolio;\r\n\r\nexport interface IUrlArray {\r\n    urls: string[];\r\n}","import React, { useState } from 'react';\r\nimport '../styles/booking.scss';\r\n\r\nconst firebase = require(\"firebase\");\r\n// Required for side-effects\r\nrequire(\"firebase/functions\");\r\n\r\nfirebase.initializeApp({\r\n    apiKey: \"AIzaSyCoOgi9QyVCvbP2D2YI2AwtEZBFYkpcBhY\",\r\n    authDomain: \"sweet-photography.firebaseapp.com\",\r\n    databaseURL: \"https://sweet-photography.firebaseio.com\",\r\n    projectId: \"sweet-photography\",\r\n    storageBucket: \"sweet-photography.appspot.com\",\r\n    messagingSenderId: \"770786476868\",\r\n    appId: \"1:770786476868:web:0ad67f4a8568a7c637cd11\",\r\n    measurementId: \"G-TPXLMFFXP0\"\r\n  });\r\n\r\nvar functions = firebase.functions();\r\n\r\n\r\nfunction BookingContainer() {\r\n    const [isSubmittingForm, setIsSubmittingForm] = useState(false);\r\n    const [submitted, setSubmitted] = useState(false);\r\n\r\n    async function Book(event: any) {\r\n        event.preventDefault();\r\n        setIsSubmittingForm(true);\r\n\r\n        const formData = new FormData(event.target);\r\n        const formValues: ContactFormData = {\r\n            fname: formData.get(\"fname\")?.toString() ?? \"\",\r\n            lname: formData.get(\"lname\")?.toString() ?? \"\",\r\n            email: formData.get(\"email\")?.toString() ?? \"\",\r\n            phone: Number(formData.get(\"phone\")),\r\n            numberOfDogs: Number(formData.get(\"numberOfDogs\")),\r\n            comments: formData.get(\"comment\")?.toString() ?? \"\"\r\n        };\r\n\r\n        const dataHtml = `<h1>Contact form from ${formValues.fname}  ${formValues.lname}</h1>\r\n                            <ul>\r\n                                <li>Email: ${formValues.email}</li>\r\n                                <li>Number of Dogs: ${formValues.numberOfDogs}</li>\r\n                                <li>Phone: ${formValues.phone}</li>\r\n                                <li>Comments: ${formValues.comments}</li>\r\n                            </ul>`;\r\n        \r\n        const formElement = document.getElementById(event.target.id) as HTMLFormElement;\r\n\r\n        var sendEmail = firebase.functions().httpsCallable(\"sendEmail\");\r\n        sendEmail(dataHtml, formValues.email).then(function(result: any) {\r\n            if(result) {\r\n                setIsSubmittingForm(false);   \r\n                setSubmitted(true);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    if(submitted) {\r\n        return <h1 className=\"submitted\">Thank you. I will contact you within 2 business days.</h1>;\r\n    }\r\n\r\n    return (\r\n        <div className={submitted ? \"wrapper close-booking\" : \"wrapper\"}>\r\n            <div className=\"flex-text\">\r\n                <h1>Bookings available in San Antonio.</h1>\r\n                <p>Please fill out the form below and I will contact you within the next 2 business days.</p>\r\n            </div>\r\n            <form onSubmit={Book} id=\"booking-form\">\r\n                <div className=\"form-col\">\r\n                    <label>First Name</label>\r\n                    <input required type=\"text\" name=\"fname\" aria-required=\"true\" aria-label=\"First Name\" minLength={3} />\r\n                </div>\r\n                <div className=\"form-col\">\r\n                    <label>Last Name</label>\r\n                    <input required type=\"text\" name=\"lname\" aria-required=\"true\" aria-label=\"Last Name\" minLength={3} />\r\n                </div>\r\n                <div className=\"form-col\">\r\n                    <label>Email</label>\r\n                    <input required type=\"email\" name=\"email\" aria-required=\"true\" aria-label=\"Email\" />\r\n                </div>\r\n                <div className=\"form-col\">\r\n                    <label>Phone Number</label>\r\n                    <input required type=\"number\" name=\"phone\" aria-required=\"true\" aria-label=\"Phone Number\" pattern=\"[0-9]{10}\"/>\r\n                </div>\r\n\r\n                <span className=\"divider\" />\r\n\r\n                <div className=\"form-col\">\r\n                    <label>Number of Dogs</label>\r\n                    <input required type=\"number\" name=\"numberOfDogs\" aria-required=\"true\" aria-label=\"Number of Dogs\" />\r\n                </div>\r\n                <div className=\"form-col\">\r\n                    <label>Comments</label>\r\n                    <input type=\"text\" name=\"comment\" aria-required=\"true\" aria-label=\"Comments\" />\r\n                </div>\r\n                <button disabled={isSubmittingForm} type=\"submit\">\r\n                    {isSubmittingForm ? \"Submitting...\" : \"Submit\"}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BookingContainer;\r\n\r\nclass ContactFormData {\r\n    fname: string = \"\";\r\n    lname: string = \"\";\r\n    email: string = \"\";\r\n    phone: number = 0;\r\n    numberOfDogs: number = 0;\r\n    comments: string = \"\";\r\n}","import React, { useRef, useState, useEffect } from 'react';\r\nimport './App.scss';\r\nimport urls from './settings/image_urls.json';\r\nimport Portfolio from './components/Portfolio';\r\nimport BookingContainer from './components/BookingContainer';\r\n\r\nconst scrollToRef = (ref: React.MutableRefObject<any>) => {\r\n    window.scrollTo({\r\n        top: ref.current.offsetTop,\r\n        behavior: 'smooth'\r\n    });\r\n}\r\n\r\nconst urlsGroup1 = urls.splice(0, Math.ceil(urls.length / 2));\r\nconst urlsGroup2 = urls.splice(0, urls.length);\r\n\r\nfunction App() {\r\n    const bookingRef = useRef(null);\r\n    const executeScroll = () => scrollToRef(bookingRef);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <button onClick={executeScroll} id=\"booking-btn\">\r\n                Book\r\n            </button>\r\n            <Portfolio urls={urlsGroup1} />\r\n            <div className=\"wrapper bio\">\r\n                <div className=\"bio-text\">\r\n                    <h1><u>Rebekah Hurley</u></h1>\r\n                    <p>I'm a professional dog trainer and photography. I specialize in off-leash training and behavior correction. I have four dogs of my own: Kanga (Newfoundland), Alaska (Catahoula), Tiny Tina (Dauschund), and Piglet (Corgi). </p>\r\n                    {/*<img src='./images/signature_placeholder.webp' alt=\"Rebekah Hurley, Signature\" />*/}\r\n                </div>\r\n            </div>\r\n            <Portfolio urls={urlsGroup2} />\r\n            <div ref={bookingRef} id=\"booking-container\">\r\n                <BookingContainer />\r\n            </div>\r\n            </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}