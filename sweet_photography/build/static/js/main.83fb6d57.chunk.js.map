{"version":3,"sources":["components/Portfolio.tsx","components/BookingContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["images","getColumnCount","width","window","screen","availWidth","Portfolio","iUrl","urls","forEach","element","push","src","useState","columnCount","setColumnCount","fullScreenImageSrc","setFullScreenImage","useEffect","addEventListener","Fragment","className","items","columnGutter","overscanBy","render","data","role","alt","onClick","firebase","require","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","functions","BookingContainer","isSubmittingForm","setIsSubmittingForm","submitted","setSubmitted","event","a","preventDefault","formData","FormData","target","formValues","fname","get","toString","lname","email","phone","Number","numberOfDogs","comments","dataHtml","document","getElementById","id","httpsCallable","sendEmail","then","result","onSubmit","required","type","name","aria-required","aria-label","minLength","pattern","disabled","urlsGroup1","splice","Math","ceil","length","urlsGroup2","App","bookingRef","useRef","ref","scrollTo","top","current","offsetTop","behavior","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.83fb6d57.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/portfolio.scss';\r\nimport {Masonry} from 'masonic';\r\n\r\nconst Portfolio = (iUrl: IUrlArray) => {\r\n    generateImages(iUrl.urls);\r\n\r\n    const [columnCount, setColumnCount ] = useState(getColumnCount());\r\n    const [ fullScreenImageSrc, setFullScreenImage ] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const resetColumnCount = () => {\r\n            setColumnCount(getColumnCount());\r\n        };\r\n\r\n        window.addEventListener('resize', resetColumnCount);\r\n    });\r\n\r\n    const MasonryElement = (data: any) => (\r\n        <div className=\"grid-cell\" role=\"group\">\r\n            <img src={process.env.PUBLIC_URL +\"/images/gallery/\" + data.data.src} alt={data.data.src} role=\"image\" />\r\n        </div>\r\n    );\r\n\r\n    const enlargeImage = (event: any) => {\r\n        setFullScreenImage(event.target.src);\r\n    }\r\n\r\n    const closeImage = () => {\r\n        setFullScreenImage(\"\");\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n        <div className=\"wrapper portfolio\">\r\n            <div className=\"gallery\">\r\n                <Masonry \r\n                    items={images} \r\n                    columnGutter={5}\r\n                    columnCount={columnCount}\r\n                    overscanBy={columnCount}\r\n                    render={MasonryElement} \r\n                    className=\"no-border\" \r\n                    role=\"grid\" />\r\n            </div>\r\n        </div>\r\n        {fullScreenImageSrc !== \"\" ? \r\n            (\r\n            <div className=\"fullscreen-image\">\r\n                <img src={fullScreenImageSrc} alt={fullScreenImageSrc} />\r\n                <button className=\"close\" onClick={closeImage}>&#10005;</button>\r\n            </div>\r\n            ) : null\r\n        }\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nlet images: any[] = [];\r\n\r\nfunction generateImages(urls: string[]) {\r\n    images = [];\r\n    urls.forEach(element => {\r\n        images.push({ src: element});\r\n    });\r\n}\r\n\r\nfunction getColumnCount() {\r\n    const width = window.screen.availWidth;\r\n\r\n    if (width > 1100) {\r\n        return 4;\r\n    }\r\n    if (width > 1000) {\r\n        return 3;\r\n    }\r\n    if (width > 800) {\r\n        return 2;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\r\n\r\nexport default Portfolio;\r\n\r\nexport interface IUrlArray {\r\n    urls: string[];\r\n}","import React, { useState } from 'react';\r\nimport '../styles/booking.scss';\r\n\r\nconst firebase = require(\"firebase\");\r\n// Required for side-effects\r\nrequire(\"firebase/functions\");\r\n\r\nfirebase.initializeApp({\r\n    apiKey: \"AIzaSyCoOgi9QyVCvbP2D2YI2AwtEZBFYkpcBhY\",\r\n    authDomain: \"sweet-photography.firebaseapp.com\",\r\n    databaseURL: \"https://sweet-photography.firebaseio.com\",\r\n    projectId: \"sweet-photography\",\r\n    storageBucket: \"sweet-photography.appspot.com\",\r\n    messagingSenderId: \"770786476868\",\r\n    appId: \"1:770786476868:web:0ad67f4a8568a7c637cd11\",\r\n    measurementId: \"G-TPXLMFFXP0\"\r\n  });\r\n\r\nvar functions = firebase.functions();\r\n\r\n\r\nfunction BookingContainer() {\r\n    const [isSubmittingForm, setIsSubmittingForm] = useState(false);\r\n    const [submitted, setSubmitted] = useState(false);\r\n\r\n    async function Book(event: any) {\r\n        event.preventDefault();\r\n        setIsSubmittingForm(true);\r\n\r\n        const formData = new FormData(event.target);\r\n        const formValues: ContactFormData = {\r\n            fname: formData.get(\"fname\")?.toString() ?? \"\",\r\n            lname: formData.get(\"lname\")?.toString() ?? \"\",\r\n            email: formData.get(\"email\")?.toString() ?? \"\",\r\n            phone: Number(formData.get(\"phone\")),\r\n            numberOfDogs: Number(formData.get(\"numberOfDogs\")),\r\n            comments: formData.get(\"comment\")?.toString() ?? \"\"\r\n        };\r\n\r\n        const dataHtml = `<h1>Contact form from ${formValues.fname}  ${formValues.lname}</h1>\r\n                            <ul>\r\n                                <li>Email: ${formValues.email}</li>\r\n                                <li>Number of Dogs: ${formValues.numberOfDogs}</li>\r\n                                <li>Phone: ${formValues.phone}</li>\r\n                                <li>Comments: ${formValues.comments}</li>\r\n                            </ul>`;\r\n        \r\n        const formElement = document.getElementById(event.target.id) as HTMLFormElement;\r\n\r\n        var sendEmail = firebase.functions().httpsCallable(\"sendEmail\");\r\n        sendEmail(dataHtml, formValues.email).then(function(result: any) {\r\n            if(result) {\r\n                setIsSubmittingForm(false);   \r\n                setSubmitted(true);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    if(submitted) {\r\n        return <h1 className=\"submitted\">Thank you. I will contact you within 2 business days.</h1>;\r\n    }\r\n\r\n    return (\r\n        <div className={submitted ? \"wrapper close-booking\" : \"wrapper\"}>\r\n            <div className=\"flex-text\">\r\n                <h1>Bookings available in San Antonio.</h1>\r\n                <p>Please fill out the form below and I will contact you within the next 2 business days.</p>\r\n            </div>\r\n            <form onSubmit={Book} id=\"booking-form\">\r\n                <div className=\"form-col\">\r\n                    <label>First Name</label>\r\n                    <input required type=\"text\" name=\"fname\" aria-required=\"true\" aria-label=\"First Name\" minLength={3} />\r\n                </div>\r\n                <div className=\"form-col\">\r\n                    <label>Last Name</label>\r\n                    <input required type=\"text\" name=\"lname\" aria-required=\"true\" aria-label=\"Last Name\" minLength={3} />\r\n                </div>\r\n                <div className=\"form-col\">\r\n                    <label>Email</label>\r\n                    <input required type=\"email\" name=\"email\" aria-required=\"true\" aria-label=\"Email\" />\r\n                </div>\r\n                <div className=\"form-col\">\r\n                    <label>Phone Number</label>\r\n                    <input required type=\"number\" name=\"phone\" aria-required=\"true\" aria-label=\"Phone Number\" pattern=\"[0-9]{10}\"/>\r\n                </div>\r\n\r\n                <span className=\"divider\" />\r\n\r\n                <div className=\"form-col\">\r\n                    <label>Number of Dogs</label>\r\n                    <input required type=\"number\" name=\"numberOfDogs\" aria-required=\"true\" aria-label=\"Number of Dogs\" />\r\n                </div>\r\n                <div className=\"form-col\">\r\n                    <label>Comments</label>\r\n                    <input type=\"text\" name=\"comment\" aria-required=\"true\" aria-label=\"Comments\" />\r\n                </div>\r\n                <button disabled={isSubmittingForm} type=\"submit\">\r\n                    {isSubmittingForm ? \"Submitting...\" : \"Submit\"}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BookingContainer;\r\n\r\nclass ContactFormData {\r\n    fname: string = \"\";\r\n    lname: string = \"\";\r\n    email: string = \"\";\r\n    phone: number = 0;\r\n    numberOfDogs: number = 0;\r\n    comments: string = \"\";\r\n}","import React, { useRef, useState, useEffect } from 'react';\nimport './App.scss';\nimport urls from './settings/image_urls.json';\nimport Portfolio from './components/Portfolio';\nimport BookingContainer from './components/BookingContainer';\n\nconst scrollToRef = (ref: React.MutableRefObject<any>) => {\n    window.scrollTo({\n        top: ref.current.offsetTop,\n        behavior: 'smooth'\n    });\n}\n\nconst urlsGroup1 = urls.splice(0, Math.ceil(urls.length / 2));\nconst urlsGroup2 = urls.splice(0, urls.length);\n\nfunction App() {\n    const bookingRef = useRef(null);\n    const executeScroll = () => scrollToRef(bookingRef);\n\n    return (\n        <React.Fragment>\n            <button onClick={executeScroll} id=\"booking-btn\">\n                Book\n            </button>\n            <Portfolio urls={urlsGroup1} />\n            <div className=\"wrapper bio\">\n                <div className=\"bio-text\">\n                    <h1><u>Rebekah Hurley</u></h1>\n                    <p>I'm a professional dog trainer and photography. I specialize in off-leash training and behavior correction. I have four dogs of my own: Kanga (Newfoundland), Alaska (Catahoula), Tiny Tina (Dauschund), and Piglet (Corgi). </p>\n                    {/*<img src='./images/signature_placeholder.webp' alt=\"Rebekah Hurley, Signature\" />*/}\n                </div>\n            </div>\n            <Portfolio urls={urlsGroup2} />\n            <div ref={bookingRef} id=\"booking-container\">\n                <BookingContainer />\n            </div>\n            </React.Fragment>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}